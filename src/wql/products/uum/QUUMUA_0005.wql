[交易说明]
	交易名：		取角色用户树
	所属模块：	平台公共
	功能简述：	
	版权所有：	杭州新世纪
	表引用：		
				1、角色信息表【UUM_UA_ROLE】
				2、角色用户表【UUM_UA_ROLEACCOUNT】
				3、用户表【UUM_UU_ACCOUNT】
				4、人员信息表【UUM_UU_PERSONINFO】
				5、组织信息表【UUM_UU_ORGINFO】
				6、人员兼职部门表【UUM_UU_PERSONDEPTEX】
	版本经历：	
				1、v1.0		廖树平			2015/7/27 11:37:21		创建

[数据库]
	--指定数据库，为空采用默认值，默认为db.properties中列出的第一个库

[IO定义]
	#################################################
	##			常用输入参数
	#################################################
	
	#操作符
	输入.actionflag						TYPEAS	s_mname
	
	
	#################################################
	##			表字段对应输入参数
	#################################################
	
	--角色标识
	输入.role_uuid						TYPEAS	s_uuid
	
	--组织标识
	输入.org_uuid							TYPEAS	s_uuid
	
[临时表]
	--这边列出来的临时表就会在运行期动态创建
	UUM_UA_FUNCTREE_T
	UUM_UA_FUNCTREE_T2
	UUM_UA_FUNCTREE_T3
	
[临时变量]
	临时.sys_code							TYPEAS	s_mname
	
[业务过程]

	##########################################
	#			1、输入输出检查				 #
	##########################################
	IF 输入.actionflag = ""
		ERROR ":未输入操作标识"
	ENDIF
	IF 输入.role_uuid = ""
		ERROR ":未输入角色标识"
	ENDIF
	#IF 输入.org_uuid = ""
	#	ERROR ":未输入机构标识"
	#ENDIF
	
	##########################################
	#			2、主过程前处理				 #
	##########################################
	DELETE FROM UUM_UA_FUNCTREE_T
	WHERE node_uuid IS NULL OR node_uuid IS NOT NULL
	ENDDELETE
	
	##########################################
	#			3、业务主过程			 	 #
	##########################################
	IF 输入.org_uuid <> ""
		SELECT a.sys_code AS sys_code
		FROM UUM_UU_ORGINFO a
		WHERE a.org_uuid = 输入.org_uuid
		ENDSELECT
		临时.sys_code = sys_code
	ENDIF
	
	IF 输入.actionflag = "left"
		INSERT INTO UUM_UA_FUNCTREE_T(
		 		node_uuid
		 		, node_code
		 		, node_name
		 		, parent_uuid
		 		, display_order
		 		, node_level)
		SELECT a.org_uuid
				, a.org_code
				, a.org_name
				, a.parent_uuid
				, a.display_order
				, 1
		FROM UUM_UU_ORGINFO a
		WHERE a.sysisdelete = '0' AND 
			( 临时.sys_code = '' OR 临时.sys_code <> '' AND a.sys_code LIKE CONCAT(临时.sys_code , "%" ) )
		ENDINSERT
		
		INSERT INTO UUM_UA_FUNCTREE_T(
		 		node_uuid
		 		, node_code
		 		, node_name
		 		, parent_uuid
		 		, display_order
		 		, node_level)
		SELECT c.account_uuid
				, b.person_code
				, CONCAT(b.person_name , c.login_name)
				, b.depart_uuid
				, b.display_order
				, 2
		FROM UUM_UU_PERSONINFO b
			INNER JOIN UUM_UU_ACCOUNT c ON b.person_uuid = c.user_uuid
			LEFT JOIN UUM_UA_ROLEACCOUNT d ON c.account_uuid = d.account_uuid AND d.role_uuid = 输入.role_uuid
																					AND d.org_uuid = b.depart_uuid
		WHERE b.sysisdelete = '0' AND d.account_uuid IS NULL AND 
			( 输入.org_uuid = '' OR 输入.org_uuid <> '' AND b.org_uuid = 输入.org_uuid )
		ENDINSERT
		
		INSERT INTO UUM_UA_FUNCTREE_T(
		 		node_uuid
		 		, node_code
		 		, node_name
		 		, parent_uuid
		 		, display_order
		 		, node_level)
		SELECT c.account_uuid
				, f.person_code
				, CONCAT(f.person_name , c.login_name)
				, b.depart_uuid
				, f.display_order
				, 2
		FROM UUM_UU_PERSONDEPTEX b
			INNER JOIN UUM_UU_ACCOUNT c ON b.person_uuid = c.user_uuid
			INNER JOIN UUM_UU_ORGINFO e ON b.depart_uuid = e.org_uuid
			INNER JOIN UUM_UU_PERSONINFO f ON b.person_uuid = f.person_uuid
			LEFT JOIN UUM_UA_ROLEACCOUNT d ON c.account_uuid = d.account_uuid AND d.role_uuid = 输入.role_uuid
																					AND d.org_uuid = b.depart_uuid
		WHERE d.account_uuid IS NULL AND
			( 临时.sys_code = '' OR 临时.sys_code <> '' AND e.sys_code LIKE CONCAT(临时.sys_code , "%") )
		ENDINSERT
	ENDIF
	
	IF 输入.actionflag = "right"
		INSERT INTO UUM_UA_FUNCTREE_T(
		 		node_uuid
		 		, node_code
		 		, node_name
		 		, parent_uuid
		 		, display_order
		 		, node_level)
		SELECT a.org_uuid
				, a.org_code
				, a.org_name
				, a.parent_uuid
				, a.display_order
				, 1
		FROM UUM_UU_ORGINFO a
		WHERE a.sysisdelete = '0' AND 
			( 临时.sys_code = '' OR 临时.sys_code <> '' AND a.sys_code LIKE CONCAT(临时.sys_code , "%") )	
		ENDINSERT
		
		INSERT INTO UUM_UA_FUNCTREE_T(
		 		node_uuid
		 		, node_code
		 		, node_name
		 		, parent_uuid
		 		, display_order
		 		, node_level)
		SELECT c.account_uuid
				, b.person_code
				, CONCAT(b.person_name , c.login_name)
				, b.depart_uuid
				, b.display_order
				, 2
		FROM UUM_UU_PERSONINFO b
			INNER JOIN UUM_UU_ACCOUNT c ON b.person_uuid = c.user_uuid
			INNER JOIN UUM_UA_ROLEACCOUNT d ON c.account_uuid = d.account_uuid AND d.role_uuid = 输入.role_uuid
																					AND d.org_uuid = b.depart_uuid
		WHERE b.sysisdelete = '0' AND 
			( 输入.org_uuid = '' OR 输入.org_uuid <> '' AND b.org_uuid = 输入.org_uuid )		
		ENDINSERT
		
		INSERT INTO UUM_UA_FUNCTREE_T(
		 		node_uuid
		 		, node_code
		 		, node_name
		 		, parent_uuid
		 		, display_order
		 		, node_level)
		SELECT c.account_uuid
				, f.person_code
				, CONCAT(f.person_name , c.login_name)
				, b.depart_uuid
				, f.display_order
				, 2
		FROM UUM_UU_PERSONDEPTEX b
			INNER JOIN UUM_UU_ACCOUNT c ON b.person_uuid = c.user_uuid
			INNER JOIN UUM_UU_ORGINFO e ON b.depart_uuid = e.org_uuid
			INNER JOIN UUM_UU_PERSONINFO f ON b.person_uuid = f.person_uuid
			INNER JOIN UUM_UA_ROLEACCOUNT d ON c.account_uuid = d.account_uuid AND d.role_uuid = 输入.role_uuid
																					AND d.org_uuid = b.depart_uuid
		WHERE  1 = 1 AND 
			( 临时.sys_code = '' OR 临时.sys_code <> '' AND e.sys_code LIKE CONCAT(临时.sys_code , "%") )
		ENDINSERT
	ENDIF
	
	//补充临时表2
	INSERT INTO  UUM_UA_FUNCTREE_T2(
		 		node_uuid
		 		, node_code
		 		, node_name
		 		, parent_uuid
		 		, display_order
		 		, node_level)
		SELECT 
		 		node_uuid
		 		, node_code
		 		, node_name
		 		, parent_uuid
		 		, display_order
		 		, node_level
				from UUM_UA_FUNCTREE_T
	ENDINSERT
	
	//删除没有用户的部门记录
	DELETE FROM UUM_UA_FUNCTREE_T 
	WHERE node_uuid NOT in
		(
		SELECT parent_uuid
		FROM UUM_UA_FUNCTREE_T2 
		WHERE node_level = 2
		) 
		AND node_level = 1
	ENDDELETE
	
	
	//清空临时表2
	DELETE FROM UUM_UA_FUNCTREE_T2
	ENDDELETE
	
	//补充临时表2数据
	INSERT INTO UUM_UA_FUNCTREE_T2(
		 		node_uuid
		 		, node_code
		 		, node_name
		 		, parent_uuid
		 		, display_order
		 		, node_level)
		SELECT  
		 		node_uuid
		 		, node_code
		 		, node_name
		 		, parent_uuid
		 		, display_order
		 		, node_level
				from UUM_UA_FUNCTREE_T
	ENDINSERT
	
	//补充临时表3数据
		INSERT INTO  UUM_UA_FUNCTREE_T3(
		 		node_uuid
		 		, node_code
		 		, node_name
		 		, parent_uuid
		 		, display_order
		 		, node_level)
		SELECT 
		 		node_uuid
		 		, node_code
		 		, node_name
		 		, parent_uuid
		 		, display_order
		 		, node_level
				from UUM_UA_FUNCTREE_T
	ENDINSERT
	
	//把组织的上级部门补足
	LOOP 5
		INSERT INTO UUM_UA_FUNCTREE_T(
		 		node_uuid
		 		, node_code
		 		, node_name
		 		, parent_uuid
		 		, display_order
		 		, node_level)
		SELECT o.org_uuid
				, o.org_code
				, o.org_name
				, o.parent_uuid
				, o.display_order
				, 1
		FROM UUM_UA_FUNCTREE_T2 m
			INNER JOIN UUM_UU_ORGINFO o ON m.parent_uuid = o.org_uuid
			LEFT JOIN UUM_UA_FUNCTREE_T3 n ON o.org_uuid = n.node_uuid
		WHERE m.node_level = 1 AND n.node_uuid IS NULL
		ENDINSERT	
	ENDLOOP
	
	QUERY			
		SELECT DISTINCT m.node_uuid
			, m.node_name
			, m.parent_uuid
			, m.display_order
			, m.node_level AS typeorder
			, m.node_code AS order_code
		FROM UUM_UA_FUNCTREE_T m
		ORDER BY m.node_level, m.node_code, m.display_order
		ENDSELECT
	ENDQUERY
	
	#对操作符进行判断，如果没有输入则提示错误